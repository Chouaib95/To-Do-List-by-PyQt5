# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from pathlib import Path
import sys, json

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.path_0 = (Path(__file__).parent.resolve())/"my_to_do_list.json"
        self.add_item_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.add_item_pushButton.setGeometry(QtCore.QRect(40, 60, 211, 51))
        font = QtGui.QFont()
        font.setFamily("Chiller")
        font.setPointSize(16)
        self.add_item_pushButton.setFont(font)
        self.add_item_pushButton.setObjectName("add_item_pushButton")
        self.delete_item_pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.delete_item_pushButton_2.setGeometry(QtCore.QRect(270, 60, 231, 51))
        font = QtGui.QFont()
        font.setFamily("Chiller")
        font.setPointSize(16)
        self.delete_item_pushButton_2.setFont(font)
        self.delete_item_pushButton_2.setObjectName("delete_item_pushButton_2")
        self.clear_list_pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.clear_list_pushButton_3.setGeometry(QtCore.QRect(520, 60, 231, 51))
        font = QtGui.QFont()
        font.setFamily("Chiller")
        font.setPointSize(16)
        self.clear_list_pushButton_3.setFont(font)
        self.clear_list_pushButton_3.setObjectName("clear_list_pushButton_3")
        self.my_list_listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.my_list_listWidget.setGeometry(QtCore.QRect(40, 131, 711, 411))
        font = QtGui.QFont()
        font.setFamily("Chiller")
        font.setPointSize(16)
        self.my_list_listWidget.setFont(font)
        self.my_list_listWidget.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.my_list_listWidget.setObjectName("my_list_listWidget")
        self.zone_text_lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.zone_text_lineEdit.setGeometry(QtCore.QRect(40, 10, 711, 41))
        font = QtGui.QFont()
        font.setFamily("Chiller")
        font.setPointSize(14)
        self.zone_text_lineEdit.setFont(font)
        self.zone_text_lineEdit.setObjectName("zone_text_lineEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.set_connections()
        self.style()
        self.animations()
        self.load_from_json()
        
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "To Do List"))
        self.add_item_pushButton.setText(_translate("MainWindow", "Add item to the list"))
        self.delete_item_pushButton_2.setText(_translate("MainWindow", "Delete item from the list"))
        self.clear_list_pushButton_3.setText(_translate("MainWindow", "Clear the list"))

    def save_to_json(self):
        items = [self.my_list_listWidget.item(i).text() for i in range(self.my_list_listWidget.count())]
        with open(self.path_0, "w") as json_file:
            json.dump(items, json_file, indent=4, ensure_ascii=True)

    def load_from_json(self):
        try:
            with open(self.path_0, "r") as json_file:
                items = json.load(json_file)
                print("Loaded items from JSON:", items)
                self.my_list_listWidget.clear()
                self.my_list_listWidget.addItems(map(str, items))
                self.my_list_listWidget.repaint()
                print("Items added to the list widget.")
                MainWindow.show()  # Ajout de cette ligne Vérification de la visibilité de la fenêtre principale
        except FileNotFoundError:
            print("File not found:", self.path_0)
        except Exception as e:
            print("Error loading from JSON:", e)


    def add_item(self):
        contenu = self.zone_text_lineEdit.text()
        self.my_list_listWidget.addItem(contenu)
        self.zone_text_lineEdit.setText("")
        # Ajout d'une animation lors de l'ajout d'un élément
        self.animation.start()
        self.save_to_json()

    def delete_item(self):
        self.my_list_listWidget.takeItem(self.my_list_listWidget.currentRow())
        self.save_to_json()

    def clear_list(self):
        self.my_list_listWidget.clear() 
        self.save_to_json()
    
    def set_connections(self):
        self.add_item_pushButton.clicked.connect(self.add_item)
        self.delete_item_pushButton_2.clicked.connect(self.delete_item)
        self.clear_list_pushButton_3.clicked.connect(self.clear_list)

     # Ajout de styles sophistiqués
    def style(self):
        self.add_item_pushButton.setStyleSheet("QPushButton {"
                                               "background-color: #4CAF50;"
                                               "color: white;"
                                               "border: 2px solid #4CAF50;"
                                               "border-radius: 5px;"
                                               "padding: 5px 10px;"
                                               "font-size: 20px;"
                                               "}"
                                               "QPushButton:hover {"
                                               "background-color: #45a049;"
                                               "}")

        self.delete_item_pushButton_2.setStyleSheet("QPushButton {"
                                                    "background-color: #f44336;"
                                                    "color: white;"
                                                    "border: 2px solid #f44336;"
                                                    "border-radius: 5px;"
                                                    "padding: 5px 10px;"
                                                    "font-size: 20px;"
                                                    "}"
                                                    "QPushButton:hover {"
                                                    "background-color: #d32f2f;"
                                                    "}")

        self.clear_list_pushButton_3.setStyleSheet("QPushButton {"
                                                   "background-color: #008CBA;"
                                                   "color: white;"
                                                   "border: 2px solid #008CBA;"
                                                   "border-radius: 5px;"
                                                   "padding: 5px 10px;"
                                                   "font-size: 20px;"
                                                   "}"
                                                   "QPushButton:hover {"
                                                   "background-color: #0077A8;"
                                                   "}")
        

    def animations(self):
        # Ajout d'animations
        self.animation = QtCore.QPropertyAnimation(self.add_item_pushButton, b"geometry")
        self.animation.setDuration(500)
        self.animation.setStartValue(QtCore.QRect(40, 60, 211, 51))
        self.animation.setEndValue(QtCore.QRect(40, 60, 250, 51))
        self.animation.setEasingCurve(QtCore.QEasingCurve.OutBounce)
        

        #img_path = str(Path(r"C:\Users\choua\Desktop\Projet To_do_list\pics\img1.jpg"))
        img_path = (Path(__file__).parent.resolve())/"pics"/"img1.jpg"
        pixmap = QtGui.QPixmap(str(img_path))

        # Définir l'arrière-plan avec l'image chargée
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Window, QtGui.QBrush(pixmap))
        MainWindow.setPalette(palette)

        # Ajout d'un QGraphicsOpacityEffect pour le fond
        self.background_effect = QtWidgets.QGraphicsOpacityEffect()
        self.centralwidget.setGraphicsEffect(self.background_effect)

        # Animation pour le fond
        self.background_animation = QtCore.QPropertyAnimation(self.background_effect, b"opacity")
        self.background_animation.setDuration(1000)
        self.background_animation.setStartValue(0.0)
        self.background_animation.setEndValue(1.0)
        self.background_animation.setEasingCurve(QtCore.QEasingCurve.OutQuad)
        self.background_animation.start()
       # Rendre l'arrière-plan de la fenêtre principale légèrement transparent
        #MainWindow.setWindowOpacity(0.9)  # Ajustez la valeur selon vos besoins (0.0 à 1.0)

if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
